{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Graph Algorithms Course","text":"<p>Welcome to our graph algorithms course.  In this course, we will learn about the various algorithms that are used to solve business problems using graph networks.  This course leverages generative AI to create interactive simulations of how these algorithms work.</p> <p>All content in this course is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)](./license.md).</p> <p>Please let us know if you have any suggestions for improving this course.</p> <p>Dan McCreary on LinkedIn</p>"},{"location":"about/","title":"About the Graph Algorithms Book","text":"<p>Could the patent on a single graph algorithm really be worth 350 million dollars?  Yes, it can!</p> <p>When Larry Page was a student at Stanford he created the PageRank algorithm for predicting how high a page should be ranked in a search result.  The patent, which was owned by Stanford was licensed to Google for stock.  When Google went public the stock was valued at $350 million!</p> <p>This story is just one example of why graph algorithms are relevant to modeling the world around us.  In the graph community, we have the expression \"graphs are everywhere.\"  This statement reflects the fact that graph data models, particularly the labeled property graph model.</p>"},{"location":"about/#focus-on-interactive-simulations","title":"Focus on Interactive Simulations","text":""},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"glossary/","title":"Glossary of Terms for Graph Algorithms Course","text":""},{"location":"glossary/#a-search-algorithm","title":"A* Search Algorithm","text":"<p>An algorithm that finds the shortest path from a start node to a target node in a weighted graph. It uses heuristics to optimize the search process. Example: GPS navigation systems use A* to find the shortest route.</p>"},{"location":"glossary/#anomaly-detection","title":"Anomaly Detection","text":"<p>The identification of items, events, or observations in data that do not conform to an expected pattern. In graph terms, this often involves identifying unusual subgraphs or patterns. Example: Detecting unusual patterns in financial transactions which may indicate fraudulent activity.</p>"},{"location":"glossary/#attention-mechanisms-in-graphs","title":"Attention Mechanisms in Graphs","text":"<p>Incorporation of attention mechanisms in graph neural networks, allowing the model to focus on important parts of the graph while making predictions. Example: Improving performance in document classification tasks where documents are represented as word co-occurrence graphs.#### Behavioral Analytics</p> <p>The use of data about people's behavior to understand intent and predict future actions. In graph analysis, this involves studying how individuals interact within a network. Example: Analyzing customer transaction patterns to identify potential cases of money laundering.</p>"},{"location":"glossary/#bellman-ford-algorithm","title":"Bellman-Ford Algorithm","text":"<p>An algorithm that computes shortest paths from a single source vertex to all other vertices in a weighted graph. It can handle negative weight edges. Example: Used in network routing protocols.</p>"},{"location":"glossary/#big-o-notation","title":"Big-O Notation","text":"<p>A mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity. It is a critical concept in analyzing the performance and scalability of algorithms. Example: Describing the time complexity of graph algorithms, like O(n^2) for certain implementations of Dijkstra's algorithm.</p>"},{"location":"glossary/#breadth-first-search-bfs","title":"Breadth-First Search (BFS)","text":"<p>An algorithm for traversing or searching tree or graph data structures. It starts at a selected node and explores all neighbor nodes at the present depth before moving to nodes at the next depth level. Example: Used in social networking applications to find people within a certain number of degrees of separation.</p>"},{"location":"glossary/#centrality-measures","title":"Centrality Measures","text":"<p>Metrics used in network analysis to determine the importance or influence of a particular node within a graph. Common measures include degree centrality, closeness centrality, betweenness centrality, and eigenvector centrality. Example: Identifying key influencers in a social network.</p>"},{"location":"glossary/#churn-prediction","title":"Churn Prediction","text":"<p>The process of identifying signals that indicate a customer is likely to stop using a service. Graph analysis can help in identifying patterns that precede customer churn. Example: Analyzing customer interaction networks to predict which customers are at risk of churning.</p>"},{"location":"glossary/#clustering-coefficient","title":"Clustering Coefficient","text":"<p>A measure of the degree to which nodes in a graph tend to cluster together. High clustering coefficients indicate a tendency of nodes to form tightly knit groups. Example: Used in market analysis to identify communities or segments within customer networks.</p>"},{"location":"glossary/#cohort-analysis","title":"Cohort Analysis","text":"<p>A type of behavioral analytics that takes the data from a given dataset (like an e-commerce platform) and rather than looking at all users as one unit, it breaks them into related groups for analysis. Graphs can be used to visualize and analyze these cohorts. Example: Grouping customers by the date of their first purchase and analyzing their behavior patterns.</p>"},{"location":"glossary/#community-detection","title":"Community Detection","text":"<p>The process of identifying groups of nodes in a graph that are more densely connected internally than with the rest of the network. Example: Used in social network analysis to identify groups of closely connected individuals.</p>"},{"location":"glossary/#complex-event-processing-cep","title":"Complex Event Processing (CEP)","text":"<p>A method of tracking and analyzing streams of information (data) about things that happen (events), and deriving a conclusion from them. Used in finance for real-time fraud detection by analyzing patterns of transactions. Example: Monitoring financial transactions in real-time to identify potentially fraudulent activities.</p>"},{"location":"glossary/#customer-360-view","title":"Customer 360 View","text":"<p>Refers to an integrated view of customer data compiled from various touchpoints and sources, providing a comprehensive picture of the customer journey. In graph analysis, this might involve creating a graph that connects all customer interactions with products, services, and brand touchpoints. Example: Building a complete profile of a customer's interactions, preferences, transaction history, and feedback.</p>"},{"location":"glossary/#customer-lifetime-value-clv","title":"Customer Lifetime Value (CLV)","text":"<p>A prediction of the net profit attributed to the entire future relationship with a customer. Graph theory can help in understanding and predicting CLV by analyzing customer behavior patterns and their network effects. Example: Using transaction networks to predict future customer spending and loyalty.</p>"},{"location":"glossary/#degree","title":"Degree","text":"<p>The number of edges connected to a vertex. In directed graphs, this includes in-degree (number of incoming edges) and out-degree (number of outgoing edges). For instance, in a social network, a user's vertex degree might correspond to their number of friends or connections.</p>"},{"location":"glossary/#depth-first-search-dfs","title":"Depth-First Search (DFS)","text":"<p>An algorithm used for traversing or searching a graph. It starts at the root and explores as far as possible along each branch before backtracking. Example: Used in solving puzzles such as mazes.</p>"},{"location":"glossary/#dijkstras-algorithm","title":"Dijkstra's Algorithm","text":"<p>An algorithm that finds the shortest paths between nodes in a graph, which may represent, for example, road networks. It can be used for weighted graphs without negative weights. Example: Used in GPS devices to find the shortest driving route.</p>"},{"location":"glossary/#directionality","title":"Directionality","text":"<p>Refers to the presence of directed edges in a graph, where each edge has a direction, typically indicated by an arrow. In a webpage link graph, an edge from page A to page B is directed, showing a link from A to B.</p>"},{"location":"glossary/#distributed-graph-processing","title":"Distributed Graph Processing","text":"<p>A method of processing large graphs that are too big to fit in a single machine's memory by distributing the data across multiple machines. Example: Google's Pregel and Apache Giraph are frameworks for distributed graph processing.</p>"},{"location":"glossary/#dynamic-graphs","title":"Dynamic Graphs","text":"<p>Graphs that evolve over time with additions or deletions of nodes, edges, or changing edge weights. Machine learning on dynamic graphs involves adapting to these changes. Example: Analyzing transaction networks in banking for real-time fraud detection.</p>"},{"location":"glossary/#edge","title":"Edge","text":"<p>A connection between two vertices in a graph, which can be directed (indicating a one-way relationship) or undirected (indicating a two-way relationship). For example, in a road network graph, an edge could represent a road connecting two intersections.</p>"},{"location":"glossary/#edge-partitioning","title":"Edge Partitioning","text":"<p>A technique used in distributed graph processing where edges are distributed across different machines or processes, which can help in parallelizing computation and managing large-scale graphs. Example: Used in handling social network graphs that are too large for single-machine processing.</p>"},{"location":"glossary/#edge-prediction","title":"Edge Prediction","text":"<p>A machine learning task in graph analysis where the goal is to predict the formation or existence of edges in the graph based on observed data. Example: In a collaboration network, predicting future collaborations based on historical data.</p>"},{"location":"glossary/#edge-weight-anomalies","title":"Edge Weight Anomalies","text":"<p>Refers to irregularities or unexpected values in the weights of edges in a graph. In a financial transaction graph, for example, edge weights could represent the amount of money transferred. Example: Identifying unusually large transactions in a financial network that might suggest money laundering.</p>"},{"location":"glossary/#floyd-warshall-algorithm","title":"Floyd-Warshall Algorithm","text":"<p>An algorithm for finding shortest paths in a weighted graph with positive or negative edge weights (but with no negative cycles). Example: Used in high-frequency trading for finding the quickest path through a network.</p>"},{"location":"glossary/#forensic-analysis","title":"Forensic Analysis","text":"<p>The use of scientific methods and techniques to investigate crime or fraud. In graph theory, this involves examining the structure and connections within the graph to uncover illicit activities. Example: Investigating healthcare claims to uncover patterns indicative of fraudulent practices.</p>"},{"location":"glossary/#graph-analytics","title":"Graph Analytics","text":"<p>The process of analyzing data in a graph format, where modeling, statistics, and machine learning techniques are applied to the graph data. Example: Used in fraud detection by analyzing transaction networks to identify unusual patterns.</p>"},{"location":"glossary/#graph-autoencoders","title":"Graph Autoencoders","text":"<p>A neural network model that is trained to encode graph structure into a low-dimensional space and then decode this representation back to a graph. Example: Used for feature learning on graph-structured data.</p>"},{"location":"glossary/#graph-connectivity","title":"Graph Connectivity","text":"<p>Refers to the degree to which the vertices within a graph are connected. Strong connectivity in a directed graph means there is a path from each vertex to every other vertex. Example: Assessing network resilience in computer networks.</p>"},{"location":"glossary/#graph-convolutional-networks-gcns","title":"Graph Convolutional Networks (GCNs)","text":"<p>A type of Graph Neural Network that generalizes convolutional neural networks to graph-structured data. GCNs are effective in handling non-Euclidean data inherent in graphs. Example: Used in drug discovery for predicting molecular interactions.</p>"},{"location":"glossary/#graph-database","title":"Graph Database","text":"<p>A database that uses graph structures for semantic queries with nodes, edges, and properties to represent and store data. They are particularly useful for analyzing interconnections in large data sets. Example: Neo4j and Amazon Neptune are popular graph databases.</p>"},{"location":"glossary/#graph-embeddings","title":"Graph Embeddings","text":"<p>The process of transforming nodes, edges, and their features into a vector space while preserving graph topology and properties. These embeddings can be used in various machine learning applications. Example: Creating vector representations of social network users to feed into machine learning models for friend suggestion.</p>"},{"location":"glossary/#graph-neural-networks-gnns","title":"Graph Neural Networks (GNNs)","text":"<p>A type of neural network designed to directly operate on the graph structure. GNNs are used for learning graph embeddings by leveraging node features and structure. Example: Used in recommendation systems where both users and items are represented in a graph.</p>"},{"location":"glossary/#graph-partitioning","title":"Graph Partitioning","text":"<p>The process of dividing a graph into smaller components while minimizing the number of edges between different components. This is particularly important for processing large graphs on multiple machines. Example: Used in parallel computing to optimize the performance of graph algorithms.</p>"},{"location":"glossary/#graph-pattern-recognition","title":"Graph Pattern Recognition","text":"<p>The task of identifying regularities or patterns within graph data. This is crucial in detecting structured patterns associated with fraudulent activities. Example: Detecting common patterns in out-of-network referral practices that might suggest fraudulent behavior.</p>"},{"location":"glossary/#hamiltonian-cycle","title":"Hamiltonian Cycle","text":"<p>A cycle in a graph that visits each vertex exactly once and returns to the starting vertex. Determining if such a cycle exists in a graph is a well-known problem. Example: Used in solving routing problems like the traveling salesman problem.</p>"},{"location":"glossary/#heuristic","title":"Heuristic","text":"<p>A technique designed for solving a problem more quickly when classic methods are too slow, or for finding an approximate solution when classic methods fail to find any exact solution. Example: Used in A* search algorithm for pathfinding and graph traversal.</p>"},{"location":"glossary/#inbound-edge","title":"Inbound Edge","text":"<p>In a directed graph, it is an edge pointing towards a particular vertex. For example, in a traffic network, an inbound edge to a vertex might represent a road leading into a city.</p>"},{"location":"glossary/#influence-maximization","title":"Influence Maximization","text":"<p>A problem in social network analysis to determine a set of nodes that should be targeted to maximize the spread of information or influence. Example: Used in viral marketing campaigns to identify potential early adopters for new products.</p>"},{"location":"glossary/#influence-networks","title":"Influence Networks","text":"<p>Networks that map the influence customers or key opinion leaders have within their social circles. This can be particularly important for understanding how information, trends, and opinions spread among customers. Example: Identifying key influencers within a network who can sway the purchasing decisions of others.</p>"},{"location":"glossary/#know-your-customer-kyc-compliance","title":"Know Your Customer (KYC) Compliance","text":"<p>A standard in the finance industry that ensures investment advisors know detailed information about their clients' risk tolerance, investment knowledge, and financial position. Graphs can be used to map customer relationships and transactions to ensure compliance. Example: Analyzing transaction networks to ensure customers are not involved in money laundering.</p>"},{"location":"glossary/#kruskals-algorithm","title":"Kruskal's Algorithm","text":"<p>An algorithm that finds a minimum spanning tree for a connected weighted graph. This means it finds a subset of the edges that forms a tree that includes every vertex, where the total weight of all the edges in the tree is minimized. Example: Used in designing networks like water supply networks.</p>"},{"location":"glossary/#labeled-property-graph","title":"Labeled Property Graph","text":"<p>The term \"Labeled Property Graph Model\" or (LPG) refers to a specific type of graph database model that is primarily used for storing and managing complex networks of data.  In the LPG model, both nodes and edges have properties.  Edges may also optionally have a direction.  Each node has a specific type that can determine what its valid relationship and properties are.</p> <p>This course uses the LPG model.</p>"},{"location":"glossary/#link-prediction","title":"Link Prediction","text":"<p>The problem of predicting the existence of a link between two entities in a network. Example: Used in recommendation systems to suggest new connections on professional networks like LinkedIn.</p>"},{"location":"glossary/#mapreduce","title":"MapReduce","text":"<p>A programming model suitable for processing large data sets with a parallel, distributed algorithm on a cluster. Example: Used in processing large-scale graph data, as in Google's implementation of the PageRank algorithm.</p>"},{"location":"glossary/#maximal-flow","title":"Maximal Flow","text":"<p>Refers to the greatest possible flow rate in a network flow problem. Algorithms like Ford-Fulkerson are used to compute this. Example: Used in telecommunications to determine the maximum data transfer speed through a network.</p>"},{"location":"glossary/#minimum-spanning-tree-mst","title":"Minimum Spanning Tree (MST)","text":"<p>A subset of the edges of a connected, edge-weighted undirected graph that connects all the vertices together, without any cycles and with the minimum possible total edge weight. Example: Used in designing the least expensive network layout (like electrical grids or road networks).</p>"},{"location":"glossary/#money-laundering-detection","title":"Money Laundering Detection","text":"<p>The process of identifying financial transactions that are part of a money laundering scheme. Graph analysis is used to trace the complex web of transactions typical of money laundering schemes. Example: Tracing transactions through multiple accounts to uncover the layering stage of money laundering.</p>"},{"location":"glossary/#network-flow","title":"Network Flow","text":"<p>An optimization and graph algorithm to find the maximum flow in a flow network. It is used in various applications, such as traffic system, fluid dynamics, and network routing. Example: Calculating the maximum number of vehicles that can pass through a road network.</p>"},{"location":"glossary/#network-optimization","title":"Network Optimization","text":"<p>The process of optimizing the design or operation of a network. In business, this often relates to logistics, like optimizing the layout of a distribution network to minimize transport costs or time. Example: Optimizing supply chain networks.</p>"},{"location":"glossary/#network-segmentation","title":"Network Segmentation","text":"<p>The process of dividing a customer network into non-overlapping segments or groups, based on certain criteria like demographics, purchasing behavior, or social connections. Example: Creating targeted marketing campaigns based on customer segments identified through network analysis.</p>"},{"location":"glossary/#node2vec","title":"Node2Vec","text":"<p>An algorithmic framework for learning continuous feature representations for nodes in networks. Node2Vec uses flexible notions of a node's network neighborhood and can learn representations that maximize the likelihood of preserving network neighborhoods. Example: Used in fraud detection to represent transaction patterns.</p>"},{"location":"glossary/#outbound-edge","title":"Outbound Edge","text":"<p>In a directed graph, it is an edge that originates from a vertex and points away from it. For instance, in a citation network, an outbound edge from a research paper vertex could signify a citation to another paper.</p>"},{"location":"glossary/#pagerank-algorithm","title":"PageRank Algorithm","text":"<p>An algorithm used by Google Search to rank web pages in their search engine results. It is based on the structure of the web and links between pages. Example: Ranking web pages in search engine results.</p>"},{"location":"glossary/#path-analysis","title":"Path Analysis","text":"<p>In customer journey analytics, path analysis involves mapping the sequence of touchpoints or interactions a customer has with a brand before making a purchase decision. Example: Understanding the most common paths to purchase and optimizing marketing strategies accordingly.</p>"},{"location":"glossary/#prims-algorithm","title":"Prim's Algorithm","text":"<p>An algorithm that finds a minimum spanning tree for a connected weighted undirected graph. It finds a subset of the edges that forms a tree, including every vertex, where the total weight is minimized. Example: Used in network design, particularly in the design of cable networks.</p>"},{"location":"glossary/#scalability","title":"Scalability","text":"<p>The property of a system to handle a growing amount of work by adding resources. In the context of graph algorithms, it refers to the ability of the algorithm to handle increasingly large graphs. Example: Evaluating whether an algorithm like BFS can scale to graphs with billions of vertices.</p>"},{"location":"glossary/#sentiment-analysis","title":"Sentiment Analysis","text":"<p>The use of natural language processing, text analysis, and computational linguistics to identify and extract subjective information from source materials. When applied to graph theory, sentiment analysis can be used to gauge public opinion about a product or service based on social network data. Example: Analyzing social media networks to understand customer feelings towards a brand or product.</p>"},{"location":"glossary/#shortest-path-problem","title":"Shortest Path Problem","text":"<p>A problem of finding a path between two vertices (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized. Example: Used in GPS systems for finding the shortest driving route.</p>"},{"location":"glossary/#social-listening","title":"Social Listening","text":"<p>The monitoring of social media channels for mentions of a brand, product, competitors, or anything related to business. Combined with graph analysis, it can reveal insights about customer preferences and market trends. Example: Tracking brand mentions on social media to gauge customer sentiment and respond to customer needs proactively.</p>"},{"location":"glossary/#social-network-analysis-sna","title":"Social Network Analysis (SNA)","text":"<p>The process of investigating social structures through the use of network and graph theories. It characterizes networked structures in terms of nodes (individual actors, people, or things within the network) and the ties, edges, or links (relationships or interactions) that connect them. Example: Analyzing employee relationships in a corporation to improve communication or collaboration.</p>"},{"location":"glossary/#social-network-analysis-in-fraud-detection","title":"Social Network Analysis in Fraud Detection","text":"<p>Analyzing the social connections between entities (such as individuals, organizations, bank accounts) to identify fraudulent patterns of behavior. Example: Identifying fraud rings in insurance claims by analyzing the network of claimants and providers.</p>"},{"location":"glossary/#sparse-graph","title":"Sparse Graph","text":"<p>A graph in which the number of edges is close to the minimal number of edges. Sparse graphs contrast with dense graphs, where the number of edges is close to the maximal number of edges. Example: Social networks are often modeled as sparse graphs.</p>"},{"location":"glossary/#spectral-graph-theory","title":"Spectral Graph Theory","text":"<p>A field that applies concepts from linear algebra and spectral theory to graph theory. It is used in machine learning for graph embedding and clustering. Example: Clustering of web pages based on their similarity in the hyperlink structure.</p>"},{"location":"glossary/#streaming-algorithms","title":"Streaming Algorithms","text":"<p>Algorithms designed for processing data streams where the input is presented as a sequence of items and can be examined only once or a small number of times. Example: Used in real-time analysis of large-scale graph data, like analyzing trends from social media feeds.</p>"},{"location":"glossary/#subgraph-matching","title":"Subgraph Matching","text":"<p>The process of finding instances of a smaller graph (subgraph) within a larger graph. This has applications in various fields, including pattern recognition, bioinformatics, and social network analysis. Example: Used in chemical compound databases to find compounds that include a particular molecular structure.</p>"},{"location":"glossary/#suspicious-activity-reports-sars","title":"Suspicious Activity Reports (SARs)","text":"<p>Reports filed by financial institutions to flag suspected instances of money laundering or fraud. Graph analysis can help in identifying relationships and patterns that lead to the filing of SARs. Example: Analyzing transaction networks to detect patterns that necessitate the filing of a SAR.</p>"},{"location":"glossary/#tarjans-algorithm","title":"Tarjan's Algorithm","text":"<p>An algorithm for finding the strongly connected components of a directed graph. Example: Used in compilers to find loops in control flow graphs.</p>"},{"location":"glossary/#temporal-graph-analysis","title":"Temporal Graph Analysis","text":"<p>The study of graphs that change over time, where relationships between nodes can appear, disappear, or change their properties. This is crucial for analyzing dynamic systems. Example: Monitoring communication networks to identify changes in interaction patterns over time.</p>"},{"location":"glossary/#time-series-analysis-on-graphs","title":"Time Series Analysis on Graphs","text":"<p>The study of graphs in which the nodes and/or edges have time-series data associated with them. This is particularly relevant in dynamic networks where relationships evolve over time. Example: Analyzing consumer behavior over time in a retail network.</p>"},{"location":"glossary/#topological-sorting","title":"Topological Sorting","text":"<p>An algorithm used to linearly order the vertices of a graph such that for every directed edge from vertex \ufffdu to vertex \ufffdv, \ufffdu comes before \ufffdv in the ordering. Example: Used in scheduling jobs from the given dependencies among jobs.</p>"},{"location":"glossary/#touchpoint-analysis","title":"Touchpoint Analysis","text":"<p>The analysis of individual points of interaction between a customer and a brand to assess what part they play in the customer's journey. In graph theory, this involves analyzing how different touchpoints are connected and how they influence the customer's decision-making process. Example: Evaluating the effectiveness of different marketing channels in influencing customer decisions.</p>"},{"location":"glossary/#union-find-algorithm","title":"Union-Find Algorithm","text":"<p>An algorithm that performs two useful operations on a set: finding the root of an element and merging two sets. It is particularly useful for graph problems that involve partitioning elements into disjoint sets. Example: Used in Kruskal's algorithm for finding the minimum spanning tree.</p>"},{"location":"glossary/#unweighted-graph","title":"Unweighted Graph","text":"<p>A graph where edges do not have weights. Connections are either present or absent without any additional quantitative attributes. An example is a simple friendship network where edges simply indicate whether a friendship exists between two people.</p>"},{"location":"glossary/#vertex-node","title":"Vertex (Node)","text":"<p>A fundamental unit of which graphs are formed, representing an entity. For instance, in a social network graph, each user can be represented as a vertex.</p>"},{"location":"glossary/#vertex-cover","title":"Vertex Cover","text":"<p>A set of vertices that includes at least one endpoint of every edge of the graph. The problem of finding a minimum vertex cover is a classical optimization problem in computer science. Example: Used in network security to determine the minimum number of points to control to monitor network traffic.</p>"},{"location":"glossary/#weighted-graph","title":"Weighted Graph","text":"<p>A graph where each edge has a numerical value (weight) associated with it, representing quantities like distance, cost, or capacity. A common example is a road network where edges are roads with weights representing distances.</p>"},{"location":"graph-query-languages/","title":"Graph Query Languages","text":"<p>Comparing popular graph query languages like Cypher, GSQL (TigerGraph), and the emerging ISO GQL language is essential for understanding the landscape of graph database technologies. Here's a brief comparison:</p>"},{"location":"graph-query-languages/#cypher","title":"Cypher","text":"<ul> <li>Developed By: Neo4j</li> <li>Key Features:<ul> <li>Declarative query language, focusing on simplicity and expressiveness.</li> <li>Emphasizes pattern matching, making it intuitive to work with graph data.</li> <li>Allows for expressive and efficient querying and data manipulation.</li> <li>Widely used due to its association with Neo4j, a leading graph database.</li> </ul> </li> <li>Use Cases: Well-suited for social network analysis, recommendation engines, fraud detection, etc.</li> <li>Pros:<ul> <li>User-friendly syntax, especially for those familiar with SQL.</li> <li>Strong community support and extensive documentation.</li> </ul> </li> <li>Cons:<ul> <li>Primarily tied to Neo4j; not as universal across other graph database systems.</li> </ul> </li> </ul>"},{"location":"graph-query-languages/#gsql-tigergraph","title":"GSQL (TigerGraph)","text":"<ul> <li>Developed By: TigerGraph</li> <li>Key Features:<ul> <li>A highly expressive and rich graph query language.</li> <li>Supports deep link analytics: complex pattern matching and shortest path algorithms.</li> <li>Allows for the creation of user-defined functions.</li> <li>High performance and scalability, suitable for large-scale graph data.</li> </ul> </li> <li>Use Cases: Ideal for complex and deep graph analytics problems like network optimization, supply chain analysis, advanced machine learning on graph data.</li> <li>Pros:<ul> <li>Powerful and flexible for complex graph computations.</li> <li>Good scalability and performance.</li> </ul> </li> <li>Cons:<ul> <li>Steeper learning curve due to its complexity.</li> <li>Less widespread in use compared to Cypher.</li> </ul> </li> </ul>"},{"location":"graph-query-languages/#iso-gql-graph-query-language","title":"ISO GQL (Graph Query Language)","text":"<ul> <li>Developed By: ISO/IEC</li> <li>Key Features:<ul> <li>A new standard being developed by the same committee responsible for SQL.</li> <li>Aims to be a unifying language for querying graph databases.</li> <li>Intends to incorporate the strengths of existing graph query languages.</li> </ul> </li> <li>Use Cases: As it's under development, specific use cases are yet to be fully established. The goal is to have a standardized language that can be widely adopted across different graph database systems.</li> <li>Pros:<ul> <li>Potential for wide adoption and standardization.</li> <li>Incorporates features from various graph query languages.</li> </ul> </li> <li>Cons:<ul> <li>Still in development; not yet available for use.</li> <li>Uncertainty about how existing database systems will adopt or adapt to GQL.</li> </ul> </li> </ul>"},{"location":"graph-query-languages/#comparison-summary","title":"Comparison Summary","text":"<ul> <li>User-Friendliness: Cypher is often praised for its simplicity and SQL-like syntax, making it more accessible for newcomers.</li> <li>Complexity and Power: GSQL is known for its rich feature set and ability to handle complex, deep graph queries efficiently, making it ideal for advanced use cases.</li> <li>Standardization: ISO GQL aims to standardize graph querying, potentially bringing the best of both worlds, but it's still in the pipeline and its impact remains to be seen.</li> </ul> <p>Each language has its strengths and caters to different needs within the graph database ecosystem. The choice between them often depends on the specific requirements of the project and the user's familiarity with these languages.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"list-of-algorithms/","title":"Graph Algorithms","text":"<p>Here are the algorithms we will cover in a 14-week college-level course on graph algorithms.</p>"},{"location":"list-of-algorithms/#graph-search-algorithms","title":"Graph Search Algorithms","text":"<p>Graph search algorithms are fundamental in computer science and have a wide range of applications across various fields. Here's why graph search, specifically Breadth-First Search (BFS) and Depth-First Search (DFS), is important:</p>"},{"location":"list-of-algorithms/#versatility-and-applicability","title":"Versatility and Applicability","text":"<p>Graphs are a ubiquitous data structure in computer science, used to model networks, social relationships, geographical maps, and more. Graph search algorithms are essential tools for exploring and processing these structures.</p>"},{"location":"list-of-algorithms/#foundation-for-other-algorithms","title":"Foundation for Other Algorithms","text":"<p>Many complex algorithms and problems in computer science build upon the principles of BFS and DFS. For instance, algorithms for finding connected components, checking for cycle presence, or solving shortest path problems often start with a graph search.</p>"},{"location":"list-of-algorithms/#complexity-and-efficiency","title":"Complexity and Efficiency","text":"<p>Both BFS and DFS have relatively simple implementations and efficient runtimes, making them suitable for a wide range of real-world applications where computational resources may be limited.</p>"},{"location":"list-of-algorithms/#breath-first-search-bfs","title":"Breath-first Search (BFS)","text":"<p>BFS is particularly useful for finding the shortest path on unweighted graphs. This makes it crucial in scenarios where the path with the least number of edges is required, such as in networking (finding the shortest route in a network), social networking (finding degrees of separation between people), and in problem-solving (like puzzles and games).</p> <p>BFS is also used in level-order traversal of trees, a special case of graphs, which is important in many applications including hierarchical data processing.</p>"},{"location":"list-of-algorithms/#depth-first-search-dfs","title":"Depth-first search (DFS)","text":"<p>DFS is beneficial when exploring as far as possible along each branch before backtracking, making it suitable for scenarios like puzzle-solving (e.g., mazes), pathfinding in games, and in the analysis of network nodes.</p> <p>DFS is easier to implement recursively, especially when the depth of the graph is unknown or the data structure is naturally recursive (like trees).</p> <p>It's also used in topological sorting, finding connected components in a graph, and in algorithms for solving maze and path-finding problems.</p>"},{"location":"list-of-algorithms/#different-use-cases-for-bfs-and-dfs","title":"Different Use-Cases for BFS and DFS","text":"<p>The choice between BFS and DFS often depends on the specific requirements of the problem. For example, BFS is more suitable in finding the shortest path, while DFS can be more efficient in scenarios where complete traversal of a path is needed before backtracking.</p>"},{"location":"list-of-algorithms/#theoretical-importance","title":"Theoretical Importance","text":"<p>Understanding BFS and DFS is crucial for grasping fundamental concepts in computer science such as graph theory, complexity theory, and algorithm design. These algorithms provide a clear example of how different approaches to a problem (exploring breadth-first vs. depth-first) can lead to different solutions and efficiencies.</p> <p>In summary, BFS and DFS are critical not only because of their direct applications but also because they lay the groundwork for understanding more complex algorithms and problem-solving strategies in computer science. Their study offers insight into how different approaches can be employed to navigate and process graph structures, each with its unique advantages depending on the application context.</p>"},{"location":"list-of-algorithms/#path-finding","title":"Path Finding","text":"<p>Pathfinding algorithms in graph theory are designed to find the shortest or most efficient path between two points in a graph. These algorithms are fundamental in various real-world applications:</p>"},{"location":"list-of-algorithms/#navigation-and-mapping","title":"Navigation and Mapping","text":"<p>In GPS and mapping services, algorithms like Dijkstra's and A* are used to find the shortest or fastest route between locations. This application is critical in driving directions, logistics, and route optimization for delivery services.</p>"},{"location":"list-of-algorithms/#telecommunications","title":"Telecommunications","text":"<p>Path-finding algorithms help in designing efficient routing of data in communication networks. They optimize the paths that data packets take across the network to minimize latency and maximize throughput.</p>"},{"location":"list-of-algorithms/#robotics","title":"Robotics","text":"<p>In robotics, these algorithms are used for navigation and obstacle avoidance. Robots, including autonomous vehicles, use pathfinding to move from one point to another while avoiding obstacles.</p>"},{"location":"list-of-algorithms/#game-development","title":"Game Development","text":"<p>In video games, pathfinding algorithms enable characters to navigate through the game world. Algorithms like A* are popular for their efficiency and ability to handle complex, dynamic environments.</p>"},{"location":"list-of-algorithms/#network-analysis","title":"Network Analysis","text":"<p>Pathfinding is used in analyzing social networks, identifying influential nodes, or finding the shortest communication paths between individuals in a network.</p>"},{"location":"list-of-algorithms/#urban-planning-and-transportation","title":"Urban Planning and Transportation","text":"<p>Pathfinding algorithms assist in optimizing traffic flow, designing public transportation networks, and planning urban layouts.</p>"},{"location":"list-of-algorithms/#biological-and-chemical-research","title":"Biological and Chemical Research","text":"<p>In bioinformatics, these algorithms help in understanding protein folding pathways, and genetic networks, and in the mapping of neural connections.</p>"},{"location":"list-of-algorithms/#supply-chain-and-logistics","title":"Supply Chain and Logistics","text":"<p>Optimizing routes for transportation of goods, reducing costs, and improving delivery times.</p> <p>Each of these applications leverages the fundamental principle of finding an optimal path in a graph, highlighting the wide-reaching impact and importance of pathfinding algorithms in both the digital and physical worlds.</p>"},{"location":"list-of-algorithms/#pagerank","title":"PageRank","text":"<p>Could the patent on a single really be worth 350 million dollars?  Yes it can!  When Larry Page was a student at Stanford he created the PageRank algorithm for predicting how high a page should be ranked in a search result.  The patent, which was owned by Stanford was licensed to Google for stock.  When Google went public the stock was valued at $350 million!</p>"},{"location":"list-of-algorithms/#minimum-spanning-tree-mst-algorithms","title":"Minimum Spanning Tree (MST) Algorithms","text":"<p>Algorithms like Kruskal's and Prim's are essential in understanding how to connect all nodes in a graph with the minimum total weight. This concept is crucial in network design, such as in telecommunications, where minimizing the cost of laying out cables is important.</p>"},{"location":"list-of-algorithms/#topological-sorting","title":"Topological Sorting","text":"<p>This algorithm is vital for understanding dependencies. It's used in scenarios like task scheduling and course prerequisite planning. It helps students understand how to sequence activities in the presence of dependencies.</p>"},{"location":"list-of-algorithms/#strongly-connected-components-scc","title":"Strongly Connected Components (SCC)","text":"<p>Algorithms like Kosaraju's or Tarjan's SCC algorithms are crucial in understanding the connectivity in directed graphs. They have applications in social network analysis, web crawling, and more.</p>"},{"location":"list-of-algorithms/#network-flow-and-max-flow-algorithms","title":"Network Flow and Max Flow Algorithms","text":"<p>Algorithms like Ford-Fulkerson and Edmonds-Karp are fundamental in understanding flow through a network. These are highly applicable in areas such as resource allocation, transportation networks, and even in solving bipartite matching problems.</p>"},{"location":"list-of-algorithms/#dijkstras-algorithm-for-shortest-paths","title":"Dijkstra's Algorithm for Shortest Paths**:","text":"<p>While you've mentioned shortest path algorithms, Dijkstra's algorithm specifically is a cornerstone in graph theory, essential for understanding weighted graph traversal.</p>"},{"location":"list-of-algorithms/#bellman-ford-algorithm","title":"Bellman-Ford Algorithm","text":"<p>This is another shortest path algorithm that unlike Dijkstra's, can handle negative edge weights and can detect negative cycles in graphs.</p>"},{"location":"list-of-algorithms/#dynamic-programming-on-graphs","title":"Dynamic Programming on Graphs","text":"<p>Covering examples of how dynamic programming can be applied to solve complex graph problems like shortest paths, traveling salesman problem, etc.</p>"},{"location":"list-of-algorithms/#graph-coloring-and-scheduling","title":"Graph Coloring and Scheduling","text":"<p>This includes algorithms for coloring nodes in a graph, an important concept in scheduling problems, map coloring, and solving Sudoku-like puzzles.</p>"},{"location":"list-of-algorithms/#advanced-topics-in-graph-theory","title":"Advanced Topics in Graph Theory","text":"<p>Depending on the pace of the course and the interest of the students, you might delve into more advanced or specialized topics like Eulerian and Hamiltonian Paths, Graph Isomorphism, and Spectral Graph Theory.</p> <p>Including these topics will provide a comprehensive understanding of the breadth and depth of graph algorithms. They each have unique applications and illustrate different aspects of problem-solving using graph theory. This breadth will not only equip your students with the necessary theoretical knowledge but also prepare them for practical applications in various fields like computer networks, operational research, social network analysis, and more.</p>"},{"location":"lpg/","title":"Native Labeled Property Graphs","text":"<p>Native labeled property graphs are a specific type of data structure used primarily in graph databases. They are designed to efficiently store and query data that is inherently graph-like, such as social networks, recommendation systems, and other complex interconnected data.</p>"},{"location":"lpg/#what-are-native-labeled-property-graphs","title":"What are Native Labeled Property Graphs?","text":"<ul> <li> <p>Structure: These graphs are composed of nodes and edges (relationships). Each node and edge can have a label that defines its type or role. Additionally, both nodes and edges can possess a set of properties (key-value pairs) that hold relevant data.</p> </li> <li> <p>Native Storage: The term \"native\" implies that the data is stored in a way that naturally fits a graph structure. Unlike non-native graph storage, native graph databases are optimized for traversability.</p> </li> <li> <p>Traversal Using Pointers: In native labeled property graphs, nodes and edges are usually stored in such a way that they contain direct references (pointers) to adjacent nodes and edges. This makes traversing the graph (i.e., moving from one node to its connected nodes) highly efficient.</p> </li> </ul>"},{"location":"lpg/#implementation-with-pointer-traversal","title":"Implementation with Pointer Traversal","text":"<ul> <li> <p>Pointer-based Storage: Each node in the graph has pointers that directly reference its neighboring nodes or connected edges. Similarly, edges point back to the nodes they connect.</p> </li> <li> <p>Efficiency in Traversal: This direct referencing allows for fast and efficient traversal operations, as the database can quickly navigate through the graph structure without needing to perform expensive search operations.</p> </li> <li> <p>Optimization for Graph Operations: This method is particularly optimized for typical graph operations like finding shortest paths, neighbors, or specific patterns within the graph.</p> </li> </ul>"},{"location":"lpg/#comparison-to-rdbms-storage-of-graphs","title":"Comparison to RDBMS Storage of Graphs","text":"<ul> <li> <p>RDBMS Approach: In a traditional relational database management system (RDBMS), graphs are often stored in tables, with separate tables for nodes and edges. Relationships are established using foreign keys.</p> </li> <li> <p>Performance Issues: This approach can be less performant for graph operations because:</p> <ul> <li>Join Operations: Traversing the graph typically requires multiple join operations between tables, which can be computationally expensive, especially for large and complex graphs.</li> <li>Non-Native Structure: Relational databases are not inherently designed for graph-like queries, leading to inefficiencies in handling deeply connected data.</li> <li>Scalability Concerns: As the size and complexity of the graph grow, the performance of RDBMS in handling graph operations tends to degrade more rapidly compared to native graph databases.</li> </ul> </li> </ul> <p>In summary, native labeled property graphs are optimized for graph data and operations, offering significant performance benefits, especially for complex and deeply interconnected datasets. They are contrasted with RDBMS systems, which, while versatile, often struggle with the demands of graph processing due to their non-native handling of graph structures and reliance on join operations.</p>"},{"location":"relationship-traversal/","title":"Relationship Traversal","text":"<p>The chart illustrates the significant performance advantage that native graph databases typically have over RDBM systems in scenarios involving large and complex graph structures.  The chart provides a comparison of the predicted relationship traversal performance in a scenario with a very large graph, consisting of 1 billion vertices and 100 billion edges.</p> <ul> <li> <p>Native Labeled Property Graph (Green Line): Demonstrates a very slow linear growth in traversal time. This represents the high efficiency of graph databases in traversing relationships, benefiting from their optimized structure for direct pointer access and effective handling of large-scale graphs.</p> </li> <li> <p>RDBMS System (Red Line): Shows an exponential growth in traversal time. This reflects the significant performance impact of JOIN operations in RDBMS systems, especially as the number of relationships increases. In large and complex datasets, such as the one described, the cost of these operations grows rapidly, leading to much slower performance compared to graph databases.</p> </li> </ul> <p>This chart is a conceptual representation to highlight the potential performance differences in handling large-scale graph data between native graph databases and traditional RDBMS systems. The actual performance can vary depending on the specific database architecture, indexing strategies, and query optimizations used. \u200b</p>"},{"location":"topic-lists/","title":"Graph Algorithms Topics","text":"<ol> <li>Basic Graph Theory Concepts: Vertex, Edge, Degree, Directed/Undirected Graphs, Weighted Graphs, etc.</li> <li>Graph Algorithms: Dijkstra's, Bellman-Ford, A*, BFS, DFS, Kruskal's, Prim's, Topological Sorting, etc.</li> <li>Large Graphs and Performance: Big-O Notation, Distributed Graph Processing, Graph Partitioning, Sparse/Dense Graph, Streaming Algorithms, etc.</li> <li>Graphs in Business and Analytics: Centrality Measures, Community Detection, Graph Analytics, Network Segmentation, Path Analysis, etc.</li> <li>Graphs in Fraud Detection and Healthcare: Anomaly Detection, Forensic Analysis, KYC Compliance, Money Laundering Detection, etc.</li> <li>Customer Analysis: Customer 360 View, CLV, Sentiment Analysis, Churn Prediction, Cohort Analysis, Social Listening, etc.</li> <li> <p>Machine Learning and Graphs: Graph Neural Networks (GNNs), Graph Embeddings, Temporal Graph Analysis, Node2Vec, Graph Convolutional Networks (GCNs), etc.</p> </li> <li> <p>Graph Databases and Query Languages: Terms like Neo4j, Cypher Query Language, graph indexing, and graph-based data models.</p> </li> <li>Graph Theory in Bioinformatics and Healthcare: Network pharmacology, protein-protein interaction networks, genetic networks.</li> <li>Graphs in Social Science and Epidemiology: Social influence models, diffusion networks, contact tracing graphs.</li> <li>Graph Theory in Infrastructure and Urban Planning: Transportation networks, utility networks, urban flow analysis.</li> <li>Graph Theory in Physics and Chemistry: Atomic and molecular structures, network thermodynamics, quantum graphs.</li> </ol>"},{"location":"data/","title":"Generating Datasets for Graph Algorithms","text":"<p>The best way to quickly understand graph algorithms is to have high-quality data sets to help you visualize how the graph algorithms work step-by-step.</p> <p>We will explore how to use generative AI to generate data sets.</p>"},{"location":"data/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a table of the 20 largest metro regions in the US.\nEach row has a metro region.\nEach row has the following columns:\n\n1. Rank\n2. Name\n3. Population\n5. Latitude\n4. Longitude\n\nRound all numbers to three significant places.\n</code></pre> <p>If you are happy with the results you can issue the following prompt:</p> <p><code>linenums=\"0 Return a downloadable JSON file of this table.</code></p>"},{"location":"data/#us-cities-graph-network-demo","title":"US Cities Graph Network Demo","text":"<p>The following demo walks you through the process of creating a sample data set of the top 20 metro regions in the US.  This dataset is ideal for testing various algorithms such as search, path and traveling salesperson.</p> <p>US Cities</p>"},{"location":"data/us-cities/","title":"Generating Data for US Cities","text":"<p>Run the US Cities Map MicroSim Edit</p> <p>ChatGPT Dialog</p>"},{"location":"data/us-cities/#example-of-reading-json-file","title":"Example of Reading JSON File","text":"<p>Demo of JSON Read MicroSim Edit MicroSim</p>"},{"location":"lessons/","title":"Graph Algorithms Lessons","text":""},{"location":"lessons/01-graph-terminology/","title":"Graph Terminology","text":"<p>In this course, we will be covering graph algorithms.  Before we dive into these algorithms we need to define some terms so we use them consistently in this course.</p>"},{"location":"lessons/01-graph-terminology/#what-is-a-graph","title":"What is a Graph?","text":"<p>A graph is a collection of nodes and edges. The nodes usually represent nouns in our world (People, Places and Things) and the edges represent relationships between these things.</p> <p>In our graph model, both nodes and edges can have properties associated with them.  This is called a labeled property graph model or LPG.</p> <p>The image above is a simple directional typed graph. Each node has a type (User, Order, Product, Location, ProductType) and each edge has a direction.  In the LPG model edges have types, but for simplicity, the edge types are not shown in this diagram.</p>"},{"location":"lessons/01-graph-terminology/#the-lpg-model","title":"The LPG Model","text":"<p>The term \"Labeled Property Graph Model\" (LPG) refers to a specific type of graph database model that is primarily used for storing and managing complex networks of data. This model is characterized by the following key features:</p> <ol> <li> <p>Vertices (Nodes): These are the fundamental entities in the graph. Each vertex represents an object, such as a person, place, or thing. Vertices can have labels that denote their types or roles in the graph.</p> </li> <li> <p>Edges (Relationships): Edges are the connections between vertices. They represent the relationships between entities. Like vertices, edges can also have labels that describe the nature or type of the relationship.</p> </li> <li> <p>Properties: Both vertices and edges can have properties, which are key-value pairs that store additional information about the entities or relationships. For example, a vertex representing a person might have properties like name, age, and email.</p> </li> <li> <p>Direction: The edges in a labeled property graph are directed. This means they have a start vertex and an end vertex, indicating the direction of the relationship.</p> </li> <li> <p>Multiplicity: The model allows for multiple relationships of the same or different types between a pair of vertices, providing a rich structure for representing complex networks.</p> </li> </ol> <p>The Labeled Property Graph Model is widely used in various applications such as social networks, recommendation systems, and fraud detection because of its flexibility and the rich, semi-structured nature of the data it can represent. It is particularly adept at handling interconnected data and complex queries involving deep relationships.</p>"},{"location":"lessons/01-graph-terminology/#vertex-or-node","title":"Vertex or Node","text":"<p>A vertex (plural: vertices) is a fundamental data structure used in graph theory to represent an abstract concept of a point or a location within a graph. In simpler terms, a vertex is a node or a dot in the graph. Each vertex can have properties like a name, a value, or a color, but at its core, it serves as a basic entity that can be connected to other vertices.</p> <p>In this course, we will represent vertices graphically with a circle.  The circles will frequently have a label on them to indicate their type or their name.</p>"},{"location":"lessons/01-graph-terminology/#usage-of-vertices-in-graphs","title":"Usage of Vertices in Graphs:","text":"<ol> <li> <p>Representation: Vertices are used to represent entities or objects. For example, in a social network graph, each vertex could represent a person; in a city map graph, each vertex could represent an intersection.</p> </li> <li> <p>Connections and Relationships: Vertices are connected by edges. These edges represent the relationships or pathways between the vertices. For instance, in a road network graph, edges would represent roads connecting intersections (vertices).</p> </li> <li> <p>Problem Solving: In algorithmic graph theory, vertices are crucial in formulating and solving problems like pathfinding, network flow, or matching problems. Algorithms are designed to manipulate and traverse these vertices to find solutions.</p> </li> <li> <p>Network Analysis: Graphs are extensively used in network analysis, where vertices play a role in representing elements in networks such as computer, biological, or social networks. Analysis might focus on the relationships between these vertices, their centrality, or clustering within the graph.</p> </li> <li> <p>Data Structuring: In computer science, graphs are used to structure data. Vertices in these graphs can represent data points, and the connections (edges) can represent the relationship or interaction between these data points.</p> </li> <li> <p>Visual Representation: Vertices, along with edges, provide a visual way to represent complex systems or networks, making it easier to understand and analyze their structure and properties.</p> </li> </ol> <p>In summary, vertices are essential in graph theory for representing abstract or real-world entities and their interconnections in a wide array of applications ranging from social network analysis to algorithmic problem-solving.</p>"},{"location":"lessons/01-graph-terminology/#edge-relationship-or-link","title":"Edge, Relationship or Link","text":"<p>Edges are the way that we connect things in our graph. In this course, every edge may have its own properties. For example, if a graph represents cities, the edges might contain a property such as \"distance in miles\" between each city pair.</p> <p>We use the convention that relationships each have a type and this type is labeled with an all uppercase name.</p>"},{"location":"lessons/01-graph-terminology/#properties","title":"Properties","text":"<p>Both nodes and edges have a list of properties associated with them.  These properties usually have a type such as a string, a decimal number or a date.</p>"},{"location":"lessons/01-graph-terminology/#directionality","title":"Directionality","text":"<p>Edges may or may not have directionality in our graphs. A distance edge between two cities may not have directionality, but a dependency graph which-says that task B depends on A finishing will have a direction.  We use arrows to indicate direction.</p>"},{"location":"sims/","title":"Graph Algorithm MicroSims","text":"<p>A MicroSim is a small program that simulates one of the concepts we are teaching in this course.  We use the powerful p5.js system for doing many of our simulations.</p>"},{"location":"sims/bfs/","title":"Breath First Graph Search","text":"![](./bfs.png)    Breath First Search <p>Run Breath First Graph Search MicroSim Note you must click on the Next Button twice to get to level 1 search.</p>"},{"location":"sims/bfs/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a simulation of breadth-first-search on a graph.  \nPlace a green vertex at the center of a network of 20 \nvertices that are placed on the canvas.  \nConnect each vertex to the 2 or 3 closest vertices \nusing edges. For each step in the search, \ncolor the next vertex red.  \nRepeat until all vertices have been visited.\n</code></pre> <p>Link to Transcript</p>"},{"location":"sims/data-element-match/","title":"Data Element Matcher","text":"![Image Name](./image.png){ width=\"400\" }    Figure caption. <p>Run the Data Element Match Demo</p>"},{"location":"sims/data-element-match/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/degree/","title":"Degree MicroSim","text":"<p>Link to Demo Edit MicroSim</p> <p>The figure above is a simple graph that has nodes represented by dark blue circles.</p> <p>Next to each vertex is the \"degree\" of each node. There are three numbers:</p> <ol> <li> <p>Incoming The number of directed edges that are entering the node.</p> </li> <li> <p>Outgoing The number of directed edges that are leaving the node or pointing at other nodes.</p> </li> </ol> <p>3: Total The sum of the incoming and outgoing edges.</p> <p>Many graph databases don't perform well when a graph has a large number of incoming or outgoing edges.  For example, if you have a node for  Gender (Female, Male or Unknown) then every Person in the graph (billions?) would have an incoming HAS_GENDER edge.  Although this can work quickly to narrow down a population to only female or male people, it can also slow down your system if it was not designed to scale.</p> <p>In graph theory and network analysis, a vertex (or node) with a high number of incoming edges is often referred to as a \"hub\". This term is especially common in the context of scale-free networks, where some nodes act as highly connected hubs.</p> <p>Another term that might be used, depending on the context, is \"sink\". This is particularly used in directed graphs where edges have a direction. In such cases, a sink is a vertex with a high number of incoming edges and few or no outgoing edges.</p> <p>The importance of these nodes can vary depending on the specific application or the type of network being analyzed. For instance, in social network analysis, such nodes might represent influential individuals or organizations, whereas in web graph analysis, they might represent popular web pages with many incoming links.</p>"},{"location":"sims/degree/#celebrity-nodes-high-in-degree-in-social-networks","title":"Celebrity Nodes: High In-Degree In Social Networks","text":"<p>In Twitter and other social media contexts, a person with a large number of followers is often referred to as an \"influencer\". This term is used because such individuals have the potential to influence their many followers through their posts, opinions, and endorsements.</p> <p>Another common term is \"Twitter celebrity\" or \"social media celebrity\", used for individuals who have gained a significant following due to their fame on these platforms. This can include celebrities from other fields who have carried their fame over to social media, as well as people who have become famous primarily through their online presence.</p> <p>In the context of network analysis, these individuals might be referred to as \"nodes with high degree centrality\", indicating that they have a high number of connections (followers in this case) within the network.</p>"},{"location":"sims/force/","title":"Force Directed Graph Layout","text":"<p>Force Directed Graph on the MicroSims Site</p>"},{"location":"sims/force/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a simulation of a force-directed graph placement algorithm.\nGenerate a single file p5.js sketch on a 500x400 canvas.\nSet global variables for the width and height of the canvas.\nThe algorithm will move the position of vertices of a connected\n   based on a force-directed graph placement mode.\nFor the initial state,  place 20 vertices on random locations on a 500x400 canvas. \nMake the vertices be rendered by a circle with a radius of 10.\nConnect each vertex to 3 other vertices using bidirectional links.\nAdd a controls to incrementally step through the algorithm.\nAdd buttons for a single Step, 10 Steps, 100 Steps and 1,000 Steps at the bottom of canvas.\nDisplay the number of steps, and the total movement of the verticies in\neach step.\n</code></pre>"},{"location":"sims/matching/","title":"Matching","text":""},{"location":"sims/page-rank/","title":"Page Rank","text":"![Image Name](./page-rank.png){ width=\"400\" }    Figure caption. <p>Run the Page Rank MicroSim Edit the PageRank MicroSim</p> <p>When the \"Update PageRank\" button is pressed multiple times in the p5.js sketch, the PageRank values for each node in the graph are recalculated and updated iteratively. Here's a breakdown of what happens during each update:</p> <ol> <li> <p>Initial PageRank Distribution: Initially, every node is assigned the same PageRank value, typically <code>1.0</code>. This represents an equal distribution of 'importance' or 'rank' among all nodes.</p> </li> <li> <p>PageRank Calculation: On each update, the PageRank for each node is recalculated based on the PageRank algorithm. The new PageRank of a node is determined by the sum of the PageRank values of its incoming links, divided by the number of outgoing links from each of those nodes. This is modified by the damping factor, which is a constant (typically set around 0.85) used to model the probability of randomly jumping to another node in the network.</p> </li> <li> <p>Damping Factor: The damping factor (0.85 in your case) plays a critical role. It accounts for the likelihood that a person randomly clicking on links will eventually stop clicking. The damping factor is applied to the sum of PageRank values passed from neighboring nodes. The remaining part <code>(1 - damping factor) / number of nodes</code> is added to each node's score to ensure that the total PageRank in the system remains constant.</p> </li> <li> <p>Iterative Updates: Each time \"Update PageRank\" is pressed, the PageRank values are recalculated using the values from the previous iteration. With each iteration, the PageRank values gradually converge to a stable state where they don't change much with further iterations. This stable state reflects the relative 'importance' of each node within the network.</p> </li> <li> <p>Visual Representation: In the sketch, the diameter of each node is proportional to its PageRank value, so pressing the button repeatedly will adjust the sizes of the nodes to reflect their updated ranks.</p> </li> <li> <p>Convergence: After a sufficient number of iterations, the PageRank values will converge, meaning that additional iterations won't significantly change the values. The number of iterations needed for convergence depends on the structure of the graph and the damping factor.</p> </li> </ol> <p>In summary, each press of the \"Update PageRank\" button refines the estimation of each node's importance within the graph, moving the system closer to a balanced state where the PageRank values accurately represent the significance of each node based on its connections.</p>"},{"location":"sims/page-rank/#directed-edges-example","title":"Directed Edges Example","text":"<p>In this updated sketch:</p> <ul> <li>Each <code>Node</code> now has two arrays: <code>outgoing</code> and <code>incoming</code>, representing outgoing and incoming links respectively.</li> <li>The <code>addLink</code> method in the <code>Node</code> class creates a directed edge from one node to another.</li> <li>The <code>drawEdges</code> method in the <code>Node</code> class calls the <code>drawArrow</code> function to visually represent the directed edges.</li> <li>The <code>drawArrow</code> function is responsible for drawing an arrow from one node to another, indicating the direction of the link.</li> <li>The <code>connectRandomly</code> method in the <code>Graph</code> class creates directed edges between nodes, simulating hyperlinks between web pages.</li> </ul> <p>By pressing the \"Update PageRank\" button, the PageRank values are recalculated based on these directed edges, visually depicting the influence of each web page in the network.</p>"},{"location":"sims/shortest-path/","title":"Shortest Path","text":"<p>Given a graph, how do we find the shortest path between two points on the graph?</p> <p>The classic way to do this is to use Dijkstra's shortest path algorithm.</p> <p>In this lesson, we describe what Dijkstra's shortest path algorithm is and how it is used to solve real-world practical graph analytics problems.</p>"},{"location":"sims/shortest-path/#background","title":"Background","text":"<p>Dijkstra's shortest path algorithm is a famous algorithm in computer science, used for finding the shortest paths between nodes in a graph, which may represent, for example, road networks. It was conceived by computer scientist Edsger W. Dijkstra in 1956.</p>"},{"location":"sims/shortest-path/#how-dijkstras-algorithm-works","title":"How Dijkstra's Algorithm Works:","text":"<ol> <li> <p>Initialization: It starts with a source node and initializes the shortest path to all other nodes as infinity (or a very high value), and to the source node as 0.</p> </li> <li> <p>Exploration of Neighbors: The algorithm then repeatedly selects the node with the smallest known distance from the source node that hasn't been processed yet.</p> </li> <li> <p>Distance Update: For the selected node, it checks all its neighbors. If the sum of the current shortest distance to that node and the weight of the edge to a neighbor is less than the known distance to the neighbor, it updates the shortest distance to the neighbor.</p> </li> <li> <p>Mark as Processed: The node is then marked as processed, meaning it will not be checked again.</p> </li> <li> <p>Repeat: Steps 2-4 are repeated until all nodes have been processed or the shortest path to all reachable nodes have been found.</p> </li> </ol>"},{"location":"sims/shortest-path/#characteristics","title":"Characteristics:","text":"<ul> <li>Greedy Algorithm: It makes the optimal choice at each step, aiming to find the global optimum.</li> <li>Single-Source Shortest Paths: It finds the shortest paths from a single source node to all other nodes.</li> <li>Non-Negative Weights: It works correctly only when all edge weights are non-negative.</li> </ul>"},{"location":"sims/shortest-path/#real-world-applications","title":"Real-World Applications:","text":"<ol> <li> <p>GPS and Routing Systems: One of the most common applications is in GPS systems for finding the shortest path between two locations on a map.</p> </li> <li> <p>Network Routing Protocols: In computer networks, routing protocols like OSPF (Open Shortest Path First) use Dijkstra's algorithm to calculate the shortest path for data packets.</p> </li> <li> <p>Social Networking Applications: Finding shortest paths in social networks, like the degrees of separation between people.</p> </li> <li> <p>Urban Planning and Traffic Management: Used for analyzing traffic patterns and planning road networks in urban areas.</p> </li> <li> <p>Telecommunications: Used in telephone network systems to route calls through the network in the most efficient way.</p> </li> <li> <p>Biological Networks: In bioinformatics, it's used to understand and analyze the pathways in biological networks.</p> </li> <li> <p>Robotics and Artificial Intelligence: For pathfinding in robotics and certain AI applications, like navigating through a grid or network.</p> </li> </ol> <p>Dijkstra's algorithm is highly versatile and forms the basis of many complex systems and applications in the real world, where the efficient traversal of a graph is necessary.</p> <p>ChatGPT Dialog</p>"},{"location":"sims/spanning-tree/","title":"Spanning Trees","text":"<p>Given a list of vertices with distances between them, what is the shortest path that connects them all together?</p> <p>This is an important algorithm for things such as network design, power distribution and many other areas.  For example, in connecting houses to the power grid, how can you use the least amount of wire?</p>"},{"location":"sims/template/","title":"MicroSim Template","text":"![Image Name](./image.png){ width=\"400\" }    Figure caption. <p>Link to Demo Edit MicroSim</p>"},{"location":"sims/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/template/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/template/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\ncanvas.parent('canvas-container');\nfill(245);\nrect(0,0, canvasWidth, canvasHeight);\nfill('green');\ncircle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/template/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/template/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/template/#activities","title":"Activities","text":""},{"location":"sims/template/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/template/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/template/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/template/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/template/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/weighted-graph/","title":"Weighted Graph","text":"![Image Name](./weighted-graph.png){ width=\"400\" }    Figure caption. <p>Link to Demo Edit</p>"}]}