{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to our website.</p>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"list-of-algorithms/","title":"Graph Algorithms","text":"<p>Here are the algorithms we will cover in a 14-week college-level course on graph algorithms.</p>"},{"location":"list-of-algorithms/#search","title":"Search","text":"<p>Graph search algorithms are fundamental in computer science and have a wide range of applications across various fields. Here's why graph search, specifically Breadth-First Search (BFS) and Depth-First Search (DFS), is important:</p>"},{"location":"list-of-algorithms/#versatility-and-applicability","title":"Versatility and Applicability**:","text":"<p>Graphs are a ubiquitous data structure in computer science, used to model networks, social relationships, geographical maps, and more. Graph search algorithms are essential tools for exploring and processing these structures.</p>"},{"location":"list-of-algorithms/#foundation-for-other-algorithms","title":"Foundation for Other Algorithms**:","text":"<p>Many complex algorithms and problems in computer science build upon the principles of BFS and DFS. For instance, algorithms for finding connected components, checking for cycle presence, or solving shortest path problems often start with a graph search.</p>"},{"location":"list-of-algorithms/#complexity-and-efficiency","title":"Complexity and Efficiency**:","text":"<p>Both BFS and DFS have relatively simple implementations and efficient runtimes, making them suitable for a wide range of real-world applications where computational resources may be limited.</p>"},{"location":"list-of-algorithms/#breath-first-search-bfs","title":"Breath-first Search (BFS)","text":"<p>BFS is particularly useful for finding the shortest path on unweighted graphs. This makes it crucial in scenarios where the path with the least number of edges is required, such as in networking (finding the shortest route in a network), social networking (finding degrees of separation between people), and in problem-solving (like puzzles and games).</p> <p>BFS is also used in level-order traversal of trees, a special case of graphs, which is important in many applications including hierarchical data processing.</p>"},{"location":"list-of-algorithms/#depth-first-search-dfs","title":"Depth-first search (DFS)","text":"<p>DFS is beneficial when exploring as far as possible along each branch before backtracking, making it suitable for scenarios like puzzle-solving (e.g., mazes), pathfinding in games, and in the analysis of network nodes.</p> <p>DFS is easier to implement recursively, especially when the depth of the graph is unknown or the data structure is naturally recursive (like trees).</p> <p>It's also used in topological sorting, finding connected components in a graph, and in algorithms for solving maze and path-finding problems.</p>"},{"location":"list-of-algorithms/#different-use-cases-for-bfs-and-dfs","title":"Different Use-Cases for BFS and DFS**:","text":"<p>The choice between BFS and DFS often depends on the specific requirements of the problem. For example, BFS is more suitable in finding the shortest path, while DFS can be more efficient in scenarios where complete traversal of a path is needed before backtracking.</p>"},{"location":"list-of-algorithms/#theoretical-importance","title":"Theoretical Importance**:","text":"<p>Understanding BFS and DFS is crucial for grasping fundamental concepts in computer science such as graph theory, complexity theory, and algorithm design. These algorithms provide a clear example of how different approaches to a problem (exploring breadth-first vs. depth-first) can lead to different solutions and efficiencies.</p> <p>In summary, BFS and DFS are critical not only because of their direct applications but also because they lay the groundwork for understanding more complex algorithms and problem-solving strategies in computer science. Their study offers insight into how different approaches can be employed to navigate and process graph structures, each with its unique advantages depending on the application context.</p>"},{"location":"list-of-algorithms/#path-finding","title":"Path Finding","text":"<p>Pathfinding algorithms in graph theory are designed to find the shortest or most efficient path between two points in a graph. These algorithms are fundamental in various real-world applications:</p>"},{"location":"list-of-algorithms/#navigation-and-mapping","title":"Navigation and Mapping","text":"<p>In GPS and mapping services, algorithms like Dijkstra's and A* are used to find the shortest or fastest route between locations. This application is critical in driving directions, logistics, and route optimization for delivery services.</p>"},{"location":"list-of-algorithms/#telecommunications","title":"Telecommunications**:","text":"<p>Pathfinding algorithms help in designing efficient routing of data in communication networks. They optimize the paths that data packets take across the network to minimize latency and maximize throughput.</p>"},{"location":"list-of-algorithms/#robotics","title":"Robotics","text":"<p>In robotics, these algorithms are used for navigation and obstacle avoidance. Robots, including autonomous vehicles, use pathfinding to move from one point to another while avoiding obstacles.</p>"},{"location":"list-of-algorithms/#game-development","title":"Game Development**:","text":"<p>In video games, pathfinding algorithms enable characters to navigate through the game world. Algorithms like A* are popular for their efficiency and ability to handle complex, dynamic environments.</p>"},{"location":"list-of-algorithms/#network-analysis","title":"Network Analysis**:","text":"<p>Pathfinding is used in analyzing social networks, identifying influential nodes, or finding the shortest communication paths between individuals in a network.</p>"},{"location":"list-of-algorithms/#urban-planning-and-transportation","title":"Urban Planning and Transportation**:","text":"<p>Pathfinding algorithms assist in optimizing traffic flow, designing public transportation networks, and planning urban layouts.</p>"},{"location":"list-of-algorithms/#biological-and-chemical-research","title":"Biological and Chemical Research**:","text":"<p>In bioinformatics, these algorithms help in understanding protein folding pathways, genetic networks, and in the mapping of neural connections.</p>"},{"location":"list-of-algorithms/#supply-chain-and-logistics","title":"Supply Chain and Logistics**:","text":"<p>Optimizing routes for transportation of goods, reducing costs, and improving delivery times.</p> <p>Each of these applications leverages the fundamental principle of finding an optimal path in a graph, highlighting the wide-reaching impact and importance of pathfinding algorithms in both the digital and physical worlds.</p>"},{"location":"list-of-algorithms/#pagerank","title":"PageRank","text":""},{"location":"list-of-algorithms/#minimum-spanning-tree-mst-algorithms","title":"Minimum Spanning Tree (MST) Algorithms","text":"<p>Algorithms like Kruskal's and Prim's are essential in understanding how to connect all nodes in a graph with the minimum total weight. This concept is crucial in network design, such as in telecommunications, where minimizing the cost of laying out cables is important.</p>"},{"location":"list-of-algorithms/#topological-sorting","title":"Topological Sorting","text":"<p>This algorithm is vital for understanding dependencies. It's used in scenarios like task scheduling and course prerequisite planning. It helps students understand how to sequence activities in the presence of dependencies.</p>"},{"location":"list-of-algorithms/#strongly-connected-components-scc","title":"Strongly Connected Components (SCC)","text":"<p>Algorithms like Kosaraju's or Tarjan's SCC algorithms are crucial in understanding the connectivity in directed graphs. They have applications in social network analysis, web crawling, and more.</p> <ol> <li> <p>Network Flow and Max Flow Algorithms:</p> <ul> <li>Algorithms like Ford-Fulkerson and Edmonds-Karp are fundamental in understanding flow through a network. These are highly applicable in areas such as resource allocation, transportation networks, and even in solving bipartite matching problems.</li> <li> <p>Dijkstra's Algorithm for Shortest Paths:</p> </li> <li> <p>While you've mentioned shortest path algorithms, Dijkstra's algorithm specifically is a cornerstone in graph theory, essential for understanding weighted graph traversal.</p> </li> <li> <p>Bellman-Ford Algorithm:</p> </li> <li> <p>This is another shortest path algorithm that unlike Dijkstra's, can handle negative edge weights and can detect negative cycles in graphs.</p> </li> <li> <p>Dynamic Programming on Graphs:</p> </li> <li> <p>Covering examples of how dynamic programming can be applied to solve complex graph problems like shortest paths, traveling salesman problem, etc.</p> </li> <li> <p>Graph Coloring and Scheduling:</p> </li> <li> <p>This includes algorithms for coloring nodes in a graph, an important concept in scheduling problems, map coloring, and solving Sudoku-like puzzles.</p> </li> <li> <p>Advanced Topics in Graph Theory:</p> </li> <li> <p>Depending on the pace of the course and the interest of the students, you might delve into more advanced or specialized topics like Eulerian and Hamiltonian Paths, Graph Isomorphism, and Spectral Graph Theory.</p> </li> </ul> </li> </ol> <p>Including these topics will provide a comprehensive understanding of the breadth and depth of graph algorithms. They each have unique applications and illustrate different aspects of problem-solving using graph theory. This breadth will not only equip your students with the necessary theoretical knowledge but also prepare them for practical applications in various fields like computer networks, operational research, social network analysis, and more.</p>"},{"location":"data/","title":"Generating Datasets for Graph Algorithms","text":"<p>The best way to quickly understand graph algorithms is to have high-quality data sets to help you visualize how the graph algorithms work step-by-step.</p> <p>We will explore how to use generative AI to generate data sets.</p>"},{"location":"data/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a table of the 20 largest metro regions in the US.\nEach row has a metro region.\nEach row has the following columns:\n\n1. Rank\n2. Name\n3. Population\n5. Latitude\n4. Longitude\n\nRound all numbers to three significant places.\n</code></pre> <p>If you are happy with the results you can issue the following prompt:</p> <p><code>linenums=\"0 Return a downloadable JSON file of this table.</code></p>"},{"location":"data/#us-cities-graph-network-demo","title":"US Cities Graph Network Demo","text":"<p>The following demo walks you through the process of creating a sample data set of the top 20 metro regions in the US.  This dataset is ideal for testing various algorithms such as search, path and traveling salesperson.</p> <p>US Cities</p>"},{"location":"data/us-cities/","title":"Generating Data for US Cities","text":"<p>Run the US Cities Map MicroSim Edit</p> <p>ChatGPT Dialog</p>"},{"location":"data/us-cities/#example-of-reading-json-file","title":"Example of Reading JSON File","text":"<p>Demo of JSON Read MicroSim Edit MicroSim</p>"},{"location":"sims/","title":"Graph Algorithm MicroSims","text":"<p>A MicroSim is a small program that simulates one of the concepts we are teaching in this course.  We use the powerful p5.js system for doing many of our simulations.</p>"},{"location":"sims/shortest-path/","title":"Shortest Path","text":"<p>Given a graph, how do we find the shortest path between two points on the graph?</p> <p>The classic way to do this is to use Dijkstra's shortest path algorithm.</p> <p>In this lesson, we describe what Dijkstra's shortest path algorithm is and how it is used to solve real-world practical graph analytics problems.</p>"},{"location":"sims/shortest-path/#background","title":"Background","text":"<p>Dijkstra's shortest path algorithm is a famous algorithm in computer science, used for finding the shortest paths between nodes in a graph, which may represent, for example, road networks. It was conceived by computer scientist Edsger W. Dijkstra in 1956.</p>"},{"location":"sims/shortest-path/#how-dijkstras-algorithm-works","title":"How Dijkstra's Algorithm Works:","text":"<ol> <li> <p>Initialization: It starts with a source node and initializes the shortest path to all other nodes as infinity (or a very high value), and to the source node as 0.</p> </li> <li> <p>Exploration of Neighbors: The algorithm then repeatedly selects the node with the smallest known distance from the source node that hasn't been processed yet.</p> </li> <li> <p>Distance Update: For the selected node, it checks all its neighbors. If the sum of the current shortest distance to that node and the weight of the edge to a neighbor is less than the known distance to the neighbor, it updates the shortest distance to the neighbor.</p> </li> <li> <p>Mark as Processed: The node is then marked as processed, meaning it will not be checked again.</p> </li> <li> <p>Repeat: Steps 2-4 are repeated until all nodes have been processed or the shortest path to all reachable nodes have been found.</p> </li> </ol>"},{"location":"sims/shortest-path/#characteristics","title":"Characteristics:","text":"<ul> <li>Greedy Algorithm: It makes the optimal choice at each step, aiming to find the global optimum.</li> <li>Single-Source Shortest Paths: It finds the shortest paths from a single source node to all other nodes.</li> <li>Non-Negative Weights: It works correctly only when all edge weights are non-negative.</li> </ul>"},{"location":"sims/shortest-path/#real-world-applications","title":"Real-World Applications:","text":"<ol> <li> <p>GPS and Routing Systems: One of the most common applications is in GPS systems for finding the shortest path between two locations on a map.</p> </li> <li> <p>Network Routing Protocols: In computer networks, routing protocols like OSPF (Open Shortest Path First) use Dijkstra's algorithm to calculate the shortest path for data packets.</p> </li> <li> <p>Social Networking Applications: Finding shortest paths in social networks, like the degrees of separation between people.</p> </li> <li> <p>Urban Planning and Traffic Management: Used for analyzing traffic patterns and planning road networks in urban areas.</p> </li> <li> <p>Telecommunications: Used in telephone network systems to route calls through the network in the most efficient way.</p> </li> <li> <p>Biological Networks: In bioinformatics, it's used to understand and analyze the pathways in biological networks.</p> </li> <li> <p>Robotics and Artificial Intelligence: For pathfinding in robotics and certain AI applications, like navigating through a grid or network.</p> </li> </ol> <p>Dijkstra's algorithm is highly versatile and forms the basis of many complex systems and applications in the real world, where the efficient traversal of a graph is necessary.</p> <p>ChatGPT Dialog</p>"},{"location":"sims/template/","title":"MicroSim Template","text":"![Image Name](./image.png){ width=\"400\" }    Figure caption. <p>Link to Demo</p>"},{"location":"sims/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/template/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/template/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\ncanvas.parent('canvas-container');\nfill(245);\nrect(0,0, canvasWidth, canvasHeight);\nfill('green');\ncircle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/template/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/template/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/template/#activities","title":"Activities","text":""},{"location":"sims/template/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/template/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/template/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/template/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/template/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"}]}